{"version":3,"sources":["webpack://ngb/webpack/universalModuleDefinition","webpack://ngb/webpack/bootstrap","webpack://ngb/./temp/toggle.js","webpack://ngb/external {\"root\":[\"ng\",\"core\"],\"commonjs\":\"@angular/core\",\"commonjs2\":\"@angular/core\",\"amd\":\"@angular/core\"}","webpack://ngb/./temp/index.js","webpack://ngb/external {\"root\":[\"ng\",\"forms\"],\"commonjs\":\"@angular/forms\",\"commonjs2\":\"@angular/forms\",\"amd\":\"@angular/forms\"}","webpack://ngb/external {\"root\":[\"ng\",\"common\"],\"commonjs\":\"@angular/common\",\"commonjs2\":\"@angular/common\",\"amd\":\"@angular/common\"}"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__decorate","this","decorators","target","desc","arguments","length","getOwnPropertyDescriptor","Reflect","decorate","__metadata","k","v","metadata","core_1","forms_1","NgxToggleLabel","templateRef","elRef","configurable","Input","String","Directive","selector","TemplateRef","ElementRef","NgxToggle","ngZone","onText","offText","onColor","offColor","size","disabled","valueChange","EventEmitter","width","handleWidth","_animate","_innerAnimate","_innerState","_innerWidth","_dragStart","_dragEnd","_initialized","_hidden","set","setState","ngAfterViewInit","calculateWidth","ngAfterViewChecked","hidden","nativeElement","offsetParent","ngAfterContentInit","onElement","labelElements","find","item","forLabel","toLowerCase","offElement","onLabel","offLabel","ngOnChanges","changes","btnClasses","ngx-toggle-lg","ngx-toggle-sm","btn-lg","btn-sm","ngx-toggled-on","innerState","ngx-toggled-off","ngx-toggle-indeterminate","indeterminate","ngx-toggle-animate","animate","ngx-toggle-disabled","activeClass","inactiveClass","handleClass","classes","margin","handleClick","onTouchStart","event","onDragStart","onMouseDown","onTouchMove","onDragMove","onMouseMove","onTouchEnd","onDragEnd","onMouseUp","onMouseLeave","onKeyDown","preventDefault","stopImmediatePropagation","handle$","stopPropagation","pageX","touches","parseInt","container$","style","marginLeft","difference","Number","clearDragEnd","disableAnimation","_this","initialized","wrapper$","on$","off$","setTimeout","Math","max","offsetWidth","run","emit","wrapperElement","handleElement","containerElement","Boolean","Output","ViewChild","ContentChildren","QueryList","HostListener","Function","KeyboardEvent","Component","template","styles","preserveWhitespaces","encapsulation","ViewEncapsulation","None","NgZone","NgxToggleAccessor","_host","_subscription","subscribe","onChange","NgxToggleAccessor_1","ngOnDestroy","unsubscribe","_","_onChange","onTouched","_onTouched","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","obj","host","(change)","(touch)","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","__export","common_1","toggle_1","EXPORT_DIRECTIVES","NgxToggleModule","NgModule","imports","CommonModule","declarations"],"mappings":"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","file":"dist/bundles/ngx-toggle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@angular/core\"), require(\"@angular/forms\"), require(\"@angular/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@angular/core\", \"@angular/forms\", \"@angular/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngb\"] = factory(require(\"@angular/core\"), require(\"@angular/forms\"), require(\"@angular/common\"));\n\telse\n\t\troot[\"ngb\"] = factory(root[\"ng\"][\"core\"], root[\"ng\"][\"forms\"], root[\"ng\"][\"common\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\n/**\n * The NgxToggleLabel directive allows you to customize the label for the \"On\" and \"Off\" states,\n * allowing for more robust and complex displays.\n * This directive must be used in conjunction with a ng-template.\n */\nvar NgxToggleLabel = /** @class */ (function () {\n    function NgxToggleLabel(templateRef, elRef) {\n        this.templateRef = templateRef;\n        this.elRef = elRef;\n    }\n    Object.defineProperty(NgxToggleLabel.prototype, \"element\", {\n        get: function () {\n            return this.elRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NgxToggleLabel.prototype, \"forLabel\", void 0);\n    NgxToggleLabel = __decorate([\n        core_1.Directive({ selector: 'ng-template[ngxToggleLabel]' }),\n        __metadata(\"design:paramtypes\", [core_1.TemplateRef, core_1.ElementRef])\n    ], NgxToggleLabel);\n    return NgxToggleLabel;\n}());\nexports.NgxToggleLabel = NgxToggleLabel;\n/**\n * The NgxToggle directive allows for standalone or checkbox-enabled switch toggling via a UI element.\n * The toggle is styled using Bootstrap v4+ classes.\n */\nvar NgxToggle = /** @class */ (function () {\n    function NgxToggle(ngZone, elRef) {\n        this.ngZone = ngZone;\n        this.elRef = elRef;\n        /**\n         * Display text when toggled in the \"On\" position\n         * @type {string}\n         */\n        this.onText = 'On';\n        /**\n         * Display text when toggled in the \"Off\" position\n         * @type {string}\n         */\n        this.offText = 'Off';\n        /**\n         * Bootstrap color scheme when toggled in the \"On\" position (i.e. \"primary\" translates to \"btn-primary\")\n         * @type {string}\n         */\n        this.onColor = 'primary';\n        /**\n         * Bootstrap color scheme when toggled in the \"Off\" position (i.e. \"primary\" translates to \"btn-primary\")\n         * @type {string}\n         */\n        this.offColor = 'secondary';\n        /**\n         * Button size to display the toggle\n         * @type {string}\n         */\n        this.size = '';\n        /**\n         * Whether the toggle is disabled or not\n         * @type {boolean}\n         */\n        this.disabled = false;\n        /**\n         * An event fired when the user causes a change.\n         * The payload of the event is the currently selected value.\n         * @type {EventEmitter<boolean>}\n         */\n        this.valueChange = new core_1.EventEmitter();\n        this.width = 0;\n        this.handleWidth = 0;\n        this._animate = true;\n        this._innerAnimate = true;\n        this._innerState = false;\n        this._innerWidth = 'auto';\n        this._dragStart = null;\n        this._dragEnd = null;\n        this._initialized = false;\n        this._hidden = false;\n    }\n    Object.defineProperty(NgxToggle.prototype, \"value\", {\n        get: function () {\n            return this._innerState;\n        },\n        /**\n         * @param {boolean} value\n         */\n        set: function (value) {\n            this.setState(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxToggle.prototype.ngAfterViewInit = function () {\n        this.calculateWidth();\n        this._initialized = true;\n    };\n    NgxToggle.prototype.ngAfterViewChecked = function () {\n        var hidden = this.elRef.nativeElement.offsetParent === null;\n        if (this._initialized && this._hidden && !hidden) {\n            this.calculateWidth();\n        }\n        this._hidden = hidden;\n    };\n    NgxToggle.prototype.ngAfterContentInit = function () {\n        var onElement = this.labelElements.find(function (item) { return item.forLabel.toLowerCase() === 'on'; });\n        var offElement = this.labelElements.find(function (item) { return item.forLabel.toLowerCase() === 'off'; });\n        if (onElement) {\n            this.onLabel = onElement;\n        }\n        if (offElement) {\n            this.offLabel = offElement;\n        }\n        if (onElement || offElement) {\n            this.calculateWidth(true);\n        }\n    };\n    NgxToggle.prototype.ngOnChanges = function (changes) {\n        if (changes['onText'] || changes['offText'] || changes['size']) {\n            this._initialized = false;\n            this.calculateWidth(this._initialized);\n            this._initialized = true;\n        }\n    };\n    Object.defineProperty(NgxToggle.prototype, \"btnClasses\", {\n        get: function () {\n            var btnClasses = {\n                'disabled': this.disabled,\n                'ngx-toggle-lg': this.size === 'lg',\n                'ngx-toggle-sm': this.size === 'sm',\n                'btn-lg': this.size === 'lg',\n                'btn-sm': this.size === 'sm',\n                'ngx-toggled-on': this.innerState === true,\n                'ngx-toggled-off': this.innerState === false,\n                'ngx-toggle-indeterminate': this.indeterminate,\n                'ngx-toggle-animate': this.animate,\n                'ngx-toggle-disabled': this.disabled\n            };\n            btnClasses[this.activeClass] = this.value;\n            btnClasses[this.inactiveClass] = !this.value;\n            if (this.activeClass === this.inactiveClass) {\n                btnClasses[this.activeClass] = true;\n            }\n            return btnClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"handleClass\", {\n        get: function () {\n            var handleClass = 'btn-light';\n            var classes = { 'disabled': this.disabled, 'btn-lg': this.size === 'lg', 'btn-sm': this.size === 'sm' };\n            if ((this.value && this.onColor === 'light') || (!this.value && this.offColor === 'light')) {\n                handleClass = 'btn-dark';\n            }\n            classes[handleClass] = true;\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"onClasses\", {\n        get: function () {\n            var classes = { 'disabled': this.disabled, 'btn-lg': this.size === 'lg', 'btn-sm': this.size === 'sm' };\n            classes['btn-' + this.onColor] = true;\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"offClasses\", {\n        get: function () {\n            var classes = { 'disabled': this.disabled, 'btn-lg': this.size === 'lg', 'btn-sm': this.size === 'sm' };\n            classes['btn-' + this.offColor] = true;\n            return classes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"indeterminate\", {\n        get: function () {\n            return this._innerState === null || typeof this._innerState === 'undefined';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"activeClass\", {\n        get: function () {\n            return 'btn-' + this.onColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"inactiveClass\", {\n        get: function () {\n            return 'btn-' + this.offColor;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"innerState\", {\n        get: function () {\n            return this._innerState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"animate\", {\n        get: function () {\n            return this._animate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"marginLeft\", {\n        get: function () {\n            var margin = 0;\n            if (!this._initialized) {\n            }\n            else if (this.indeterminate || this._innerState === null || typeof this._innerState === 'undefined') {\n                margin = -(this.width / 2);\n            }\n            else if (this._dragEnd) {\n                margin = this._dragEnd;\n            }\n            else if (!this._innerState) {\n                margin = -this.width;\n            }\n            return margin + 'px';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxToggle.prototype.handleClick = function () {\n        if (!this.disabled && !this._dragEnd) {\n            this.setState(!this._innerState);\n        }\n        else if (this._dragEnd) {\n            this._dragEnd = null;\n        }\n    };\n    NgxToggle.prototype.onTouchStart = function (event) {\n        this.onDragStart(event);\n    };\n    NgxToggle.prototype.onMouseDown = function (event) {\n        this.onDragStart(event);\n    };\n    NgxToggle.prototype.onTouchMove = function (event) {\n        this.onDragMove(event);\n    };\n    NgxToggle.prototype.onMouseMove = function (event) {\n        this.onDragMove(event);\n    };\n    NgxToggle.prototype.onTouchEnd = function (event) {\n        this.onDragEnd(event, true);\n    };\n    NgxToggle.prototype.onMouseUp = function (event) {\n        this.onDragEnd(event);\n    };\n    NgxToggle.prototype.onMouseLeave = function (event) {\n        this.onDragEnd(event, true);\n    };\n    NgxToggle.prototype.onKeyDown = function (event) {\n        if (!event.key || this.disabled) {\n            return;\n        }\n        switch (event.key) {\n            case 'Left':\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                this.setState(false);\n                break;\n            case 'Right':\n                event.preventDefault();\n                event.stopImmediatePropagation();\n                this.setState(true);\n                break;\n        }\n    };\n    NgxToggle.prototype.onDragStart = function (event) {\n        if (event.target === this.handle$) {\n            if (this._dragStart || this.disabled) {\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            this._dragStart = (event.pageX || event.touches[0].pageX) - parseInt(this.container$.style.marginLeft, 10);\n            if (this._animate) {\n                this._animate = !this._animate;\n            }\n        }\n    };\n    NgxToggle.prototype.onDragMove = function (event) {\n        if (this._dragStart) {\n            event.preventDefault();\n            var difference = (event.pageX || event.touches[0].pageX) - this._dragStart;\n            if (difference < -(Number(this.width)) || difference > 0) {\n                return;\n            }\n            this._dragEnd = difference;\n        }\n    };\n    NgxToggle.prototype.onDragEnd = function (event, clearDragEnd) {\n        if (clearDragEnd === void 0) { clearDragEnd = false; }\n        if (this._dragStart) {\n            event.preventDefault();\n            event.stopPropagation();\n            if (this._dragEnd) {\n                this.setState(this._dragEnd > -(Number(this.width) / 2));\n            }\n            this._dragStart = null;\n            if (clearDragEnd) {\n                this._dragEnd = null;\n            }\n            if (this._innerAnimate) {\n                this._animate = true;\n            }\n        }\n    };\n    NgxToggle.prototype.calculateWidth = function (disableAnimation) {\n        var _this = this;\n        if (disableAnimation === void 0) { disableAnimation = false; }\n        if (disableAnimation && this._innerAnimate) {\n            this._animate = false;\n        }\n        var initialized = this._initialized;\n        if (!initialized) {\n            this.container$.style.width = 'auto';\n            this.wrapper$.style.width = 'auto';\n        }\n        this.on$.style.width = 'auto';\n        this.off$.style.width = 'auto';\n        setTimeout(function () {\n            var width = _this._innerWidth;\n            if (_this._innerWidth === 'auto') {\n                width = Math.max(_this.on$.offsetWidth, _this.off$.offsetWidth);\n            }\n            _this.handleWidth = _this.handle$.offsetWidth;\n            _this.width = Number(width);\n            if (!initialized) {\n                _this.container$.style.width = ((_this.width * 2) + _this.handleWidth) + 'px';\n                _this.wrapper$.style.width = (_this.width + _this.handleWidth) + 'px';\n            }\n            _this.ngZone.run(function () {\n                _this.on$.style.width = _this.width + 'px';\n                _this.off$.style.width = _this.width + 'px';\n                setTimeout(function () {\n                    if (disableAnimation && _this._innerAnimate) {\n                        _this._animate = true;\n                    }\n                });\n            });\n        });\n    };\n    NgxToggle.prototype.setState = function (value) {\n        if (value !== this._innerState) {\n            this._innerState = value;\n            this.valueChange.emit(this._innerState);\n        }\n    };\n    Object.defineProperty(NgxToggle.prototype, \"wrapper$\", {\n        get: function () {\n            return this.wrapperElement.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"on$\", {\n        get: function () {\n            return this.onElement.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"off$\", {\n        get: function () {\n            return this.offElement.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"handle$\", {\n        get: function () {\n            return this.handleElement.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgxToggle.prototype, \"container$\", {\n        get: function () {\n            return this.containerElement.nativeElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NgxToggle.prototype, \"onText\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NgxToggle.prototype, \"offText\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NgxToggle.prototype, \"onColor\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NgxToggle.prototype, \"offColor\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], NgxToggle.prototype, \"size\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], NgxToggle.prototype, \"disabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [Boolean])\n    ], NgxToggle.prototype, \"value\", null);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], NgxToggle.prototype, \"valueChange\", void 0);\n    __decorate([\n        core_1.ViewChild('wrapper'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], NgxToggle.prototype, \"wrapperElement\", void 0);\n    __decorate([\n        core_1.ViewChild('container'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], NgxToggle.prototype, \"containerElement\", void 0);\n    __decorate([\n        core_1.ViewChild('on'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], NgxToggle.prototype, \"onElement\", void 0);\n    __decorate([\n        core_1.ViewChild('off'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], NgxToggle.prototype, \"offElement\", void 0);\n    __decorate([\n        core_1.ViewChild('handle'),\n        __metadata(\"design:type\", core_1.ElementRef)\n    ], NgxToggle.prototype, \"handleElement\", void 0);\n    __decorate([\n        core_1.ContentChildren(NgxToggleLabel),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], NgxToggle.prototype, \"labelElements\", void 0);\n    __decorate([\n        core_1.HostListener('click'),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"handleClick\", null);\n    __decorate([\n        core_1.HostListener('touchstart', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onTouchStart\", null);\n    __decorate([\n        core_1.HostListener('mousedown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onMouseDown\", null);\n    __decorate([\n        core_1.HostListener('touchmove', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onTouchMove\", null);\n    __decorate([\n        core_1.HostListener('mousemove', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onMouseMove\", null);\n    __decorate([\n        core_1.HostListener('touchend', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onTouchEnd\", null);\n    __decorate([\n        core_1.HostListener('mouseup', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onMouseUp\", null);\n    __decorate([\n        core_1.HostListener('mouseleave', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onMouseLeave\", null);\n    __decorate([\n        core_1.HostListener('keydown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [KeyboardEvent]),\n        __metadata(\"design:returntype\", void 0)\n    ], NgxToggle.prototype, \"onKeyDown\", null);\n    NgxToggle = __decorate([\n        core_1.Component({\n            selector: 'ngx-toggle',\n            template: \"\\n        <div #wrapper class=\\\"ngx-toggle-wrapper btn\\\" [ngClass]=\\\"btnClasses\\\">\\n            <div #container class=\\\"ngx-toggle-container\\\"\\n                 [style.margin-left]=\\\"marginLeft\\\"\\n            >\\n            <span #on class=\\\"ngx-toggle-on btn\\\" [ngClass]=\\\"onClasses\\\">\\n                <ng-template [ngTemplateOutlet]=\\\"onLabel?.templateRef\\\"></ng-template>\\n                <ng-container *ngIf=\\\"!onLabel\\\">{{onText}}</ng-container>\\n            </span>\\n                <span #handle class=\\\"ngx-toggle-handle btn\\\" [ngClass]=\\\"handleClass\\\">&nbsp;</span>\\n                <span #off class=\\\"ngx-toggle-off btn\\\" [ngClass]=\\\"offClasses\\\">\\n                <ng-template [ngTemplateOutlet]=\\\"offLabel?.templateRef\\\"></ng-template>\\n                <ng-container *ngIf=\\\"!offLabel\\\">{{offText}}</ng-container>\\n            </span>\\n            </div>\\n            <ng-content></ng-content>\\n        </div>\\n    \",\n            styles: [\n                ':host {position: relative; display: inline-block;}',\n                \".ngx-toggle-container, .ngx-toggle-on, .ngx-toggle-off, .ngx-toggle-handle {\\n            display: -webkit-box !important;\\n            display: -webkit-flex !important;\\n            display: -ms-flexbox !important;\\n            display: flex !important;\\n        }\",\n                \".ngx-toggle-wrapper {\\n            position:       relative;\\n            display:        block;\\n            direction:      ltr;\\n            cursor:         pointer;\\n            overflow:       hidden;\\n            padding:        0;\\n            text-align:     left;\\n            z-index:        0;\\n            user-select:    none;\\n            vertical-align: middle;\\n            transition:     border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\\n            box-sizing:     content-box;\\n        }\",\n                '.ngx-toggle-wrapper.disabled,.ngx-toggle-wrapper.disabled .btn{cursor: default;}',\n                '.ngx-toggle-wrapper input{position: absolute; z-index: -1; visibility: hidden; width: 1px; height: 1px;}',\n                '.ngx-toggle-container{align-items: stretch!important; top: 0; border-radius: 0; transform: translateZ(0);}',\n                '.ngx-toggle-wrapper.ngx-toggle-animate .ngx-toggle-container {transition: margin-left 0.5s;}',\n                '.ngx-toggle-on,.ngx-toggle-off {align-items: center!important; text-align: center; z-index: 1; border-radius: 0;}',\n                \".ngx-toggle-on, .ngx-toggle-off, .ngx-toggle-handle {\\n            box-sizing:  border-box;\\n            cursor:      pointer;\\n            user-select: none;\\n        }\",\n                \".ngx-toggle-handle {\\n            text-align:    center;\\n            margin-top:    -1px;\\n            margin-bottom: -1px;\\n            z-index:       100;\\n            width:         1em;\\n            padding-left:  0;\\n            padding-right: 0;\\n            align-self:    stretch !important;\\n        }\"\n            ],\n            preserveWhitespaces: false,\n            encapsulation: core_1.ViewEncapsulation.None\n        }),\n        __metadata(\"design:paramtypes\", [core_1.NgZone, core_1.ElementRef])\n    ], NgxToggle);\n    return NgxToggle;\n}());\nexports.NgxToggle = NgxToggle;\nvar NgxToggleAccessor = /** @class */ (function () {\n    function NgxToggleAccessor(_host) {\n        var _this = this;\n        this._host = _host;\n        this._subscription = this._host.valueChange.subscribe(function (value) { return _this.onChange(value); });\n    }\n    NgxToggleAccessor_1 = NgxToggleAccessor;\n    NgxToggleAccessor.prototype.ngOnDestroy = function () {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n            this._subscription = null;\n        }\n    };\n    NgxToggleAccessor.prototype.onChange = function (_) {\n        if (this._onChange) {\n            this._onChange(this._host.value);\n        }\n    };\n    NgxToggleAccessor.prototype.onTouched = function () {\n        if (this._onTouched) {\n            this._onTouched();\n        }\n    };\n    NgxToggleAccessor.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    NgxToggleAccessor.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    NgxToggleAccessor.prototype.setDisabledState = function (isDisabled) {\n        this._host.disabled = isDisabled;\n    };\n    NgxToggleAccessor.prototype.writeValue = function (obj) {\n        if (typeof obj === 'boolean' || obj === null) {\n            this._host.value = obj;\n        }\n    };\n    NgxToggleAccessor = NgxToggleAccessor_1 = __decorate([\n        core_1.Directive({\n            selector: 'ngx-toggle',\n            host: { '(change)': 'onChange($event)', '(touch)': 'onTouched()' },\n            providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: core_1.forwardRef(function () { return NgxToggleAccessor_1; }), multi: true }]\n        }),\n        __metadata(\"design:paramtypes\", [NgxToggle])\n    ], NgxToggleAccessor);\n    return NgxToggleAccessor;\n    var NgxToggleAccessor_1;\n}());\nexports.NgxToggleAccessor = NgxToggleAccessor;\n//# sourceMappingURL=toggle.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./toggle\"));\nvar common_1 = require(\"@angular/common\");\nvar core_1 = require(\"@angular/core\");\nvar toggle_1 = require(\"./toggle\");\nvar EXPORT_DIRECTIVES = [toggle_1.NgxToggle, toggle_1.NgxToggleLabel, toggle_1.NgxToggleAccessor];\nvar NgxToggleModule = /** @class */ (function () {\n    function NgxToggleModule() {\n    }\n    NgxToggleModule = __decorate([\n        core_1.NgModule({ imports: [common_1.CommonModule], exports: EXPORT_DIRECTIVES, declarations: EXPORT_DIRECTIVES })\n    ], NgxToggleModule);\n    return NgxToggleModule;\n}());\nexports.NgxToggleModule = NgxToggleModule;\n//# sourceMappingURL=index.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;"],"sourceRoot":""}